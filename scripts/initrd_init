#!/bin/busybox sh
# shellcheck shell=dash
# shellcheck disable=SC2006

lcd_put()
{
  line1="$1                "
  line2="$2                "
  line1="$(echo "$line1" | head -c 16)"
  line2="$(echo "$line2" | head -c 16)"
  if [ "$micon_ver" = "3" ]; then
    micro-evtd -q -p "$micon_port" -s3 "LCD_PUTS 0 $line1","LCD_PUTS 1 $line2"
  fi
  if [ "$micon_ver" = "2" ]; then
    micro-evtd -q -p "$micon_port" -s 2090$(printf "$line1$line2" | xxd -p -c80),0025,013220,013aff
  fi
}

lcd_color()
{
  red=0
  green=0
  blue=0
  [ "$1" = "red" ] && red=1
  [ "$1" = "green" ] && green=1
  [ "$1" = "blue" ] && blue=1
  [ "$1" = "orange" ] && green=1 && red=1
  [ "$1" = "cyan" ] && green=1 && blue=1
  [ "$1" = "purple" ] && blue=1 && red=1

  if [ "$micon_ver" = "2" ]; then
    [ "$variant" = "orion5x" ] && return
    ## set LCD color green
    color=$((red+green*2+blue*4))
    micro-evtd -q -p "$micon_port" -s 02500007,0251000$color
  fi
  if [ "$micon_ver" = "3" ]; then
    if [ $red -eq 1 ]; then red="LED_ON"; else red="LED_OFF"; fi
    if [ $green -eq 1 ]; then green="LED_ON"; else green="LED_OFF"; fi
    if [ $blue -eq 1 ]; then blue="LED_ON"; else blue="LED_OFF"; fi
    micro-evtd -p "$micon_port" -s3 "$red 3","$green 4","$blue 5"
  fi
}

mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

machinetype="$(sed -n '/Hardware/ {s/^Hardware\s*:\s//;p}' /proc/cpuinfo)"

##load any modules that made it to the initrd
if [ -d "/lib/modules/$(uname -r)/" ]; then
  find /lib/modules/"$(uname -r)"/ -name "*.ko" | xargs -n1 insmod
  sleep 5 ##give new devices a moment to be detected
fi

##grab fs UUIDs set at build time
##may create enhancement in future to re-gen and update/cache other values.
##(or just replace with dracut or something)
rootfsID="$(cat /UUID)"
bootID="$(cat /bootUUID)"
variant="$(cat /variant)"

micon_ver=""
micon_port=""

if [ "$variant" = "atom" ] || [ "$variant" = "marvellv5" ] || [ "$variant" = "armada370" ] || [ "$variant" = "armadaxp" ]; then
  micon_ver=2
  micon_port="/dev/ttyS1"
fi

if [ "$variant" = "alpine" ]; then
  micon_ver=3
  micon_port="/dev/ttyUSB0"
fi

if [ "$variant" = "denverton" ]; then
  micon_ver=3
  micon_port="/dev/ttyS0"
fi

##some variants don't necessarily have a micon
##for now try accessing and see if it responds
if [ "$micon_ver" = "2" ]; then
  micro-evtd -q -p "$micon_port" -s 0003 2>/dev/null || micon_ver=""
fi

if [ "$micon_ver" = "2" ]; then
  ##enable serial console on Terastation II Pro, Terastation III, Terastation 3000... probably others
  ##it actually toggles it, on some devices there doesn't seem to be a way to determine the initial state.
  ##suppose we could toggle on and off waiting for keystroke
  micro-evtd -q -p "$micon_port" -s 0003,000f,000f
  echo "console enabled attempted" > /dev/console
  ##clear LEDs and set power LED
  micro-evtd -q -p "$micon_port" -s 0250090f96,02520000ac,02510d00a0
  ##grab starting button value, if it changes maybe they want a shell?
  button_val="$(micro-evtd -q -p "$micon_port" -s 8036)"
fi

lcd_put " Custom InitRD  " "                "
lcd_color "green"

## press enter?
FORCESHELL=0

echo "Press ENTER button to force shell"
read -t 5 && FORCESHELL=1 && echo "force via terminal input"

#kind of pointless since if you have a console and keyboard you really don't need to press func.
#POC for future, maybe ssh or some other behavior.
echo "Press FUNCTION button to force shell"
lcd_put " Press Function " "   For Shell    "

##I think they all use micon for function button
if [ "$micon_ver" = "3" ]; then
  timeout 5s dd if="$micon_port" count=5 2>/dev/null | grep -q FUNC && FORCESHELL=1 && echo "force via micon3 button"
fi

if [ "$micon_ver" = "2" ]; then
  if [ "$variant" = "atom" ]; then
    gpiobase="$(cat "$(grep -l it87 /sys/class/gpio/gpiochip*/label | xargs dirname)/base")"
    echo $((gpiobase+20)) > /sys/class/gpio/export
    gpio="$(ls -d /sys/class/gpio/it87_gp*)"
    x=0
    while [ "$x" -lt 500 ]; do
      val=`cat "$gpio"/value`
      ##default 1
      if [ "$val" -eq 0 ]; then
        FORCESHELL=1
        echo "force via it87 gpio"
        break
      fi
      sleep 0.01
      x=$((x+1))
    done
  else
    ##is function always the same bitfield-wise? if not lots of complex logic, or just look for any button?
    while [ $((x)) -lt 500 ]; do
      break
      button_val2=`micro-evtd -q -p "$micon_port" -s 8036`
      ##xor out desired button?
      if [ "$button_val" != "$button_val2" ]; then
        FORCESHELL=1
        echo "force via miconv2 button"
        break
      fi
      sleep 0.01
      x=$((x+1))
    done
  fi
fi

if [ $FORCESHELL -eq 1 ]; then
  echo "recovery shell requested"
  lcd_put " Recovery Shell " "   Requested    "
  lcd_color "orange"

else
  lcd_put " Custom InitRD  " " Finding ROOTFS "
fi

##see if this helps speed up detection once system starts
#presumably needs some module work first
#echo "0bda 8156" > /sys/bus/usb/drivers/r8152/new_id'

echo "custom initrd, looking for rootfs"

##assuming for now that if cmdline says NAND/eMMC boot that's what we want.
##followed by the disk/fs this initrd was originally generated with.
##lastly try anything with "BRROOT" partlabel
##drop to a shell if nothing suitable found

emmcboot=0
grep -q "boot_device_type=eMMC" /proc/cmdline && emmcboot=1
[ "$emmcboot" = "1" ] && ROOTDEV=`blkid -t PARTLABEL="BRROOT" -o device /dev/mmc*` && BOOTDEV=""

nandboot=0
for x in "nandboot" "rootfstype=ubifs" "bootfrom=ubi"
do
  grep -q "$x" /proc/cmdline && nandboot=1
done

if [ $nandboot -eq 1 ]; then
  echo "Attempting NAND boot based on cmdline params"
  mkdir /mnt/ubi
  ##for many devs the cmdline params will have handled everything already.
  ##in that case we can probably just exit.
  ##eventually we can test all relavant models and make any driver/dtb changes to ensure that.
  ##we can also scan all nand partitions looking for something we can boot.
  match=0
  for x in `grep mtd /proc/mtd | cut -d: -f1`
  do
    [ "`dd if=/dev/"$x" bs=4 count=1 2>/dev/null`" = "UBI#" ] || continue
    echo "ubifs detected on $x, scanning for OS"
    ubiattach -p /dev/"$x" -d 9
    tmpdev="`ls /dev/ubi9_?`"
    mount -t ubifs -o ro "$tmpdev" /mnt/ubi
    grep -q Buildroot "/mnt/ubi/etc/os-release" 2>/dev/null && match=1
    umount /mnt/ubi
    [ "$match" -eq 1 ] && ROOTDEV="$tmpdev" && BOOTDEV="" && break
    ubidetach -p /dev/"$x"
  done
fi

##look for rootfs device with matching UUID from initrd creation
[ -z "$ROOTDEV" ] && ROOTDEV=`blkid -U "$rootfsID"` && BOOTDEV=`blkid -U "$bootID"`

##if root was not found do a more intrusive search
if [ -z "$ROOTDEV" ]; then

  ##we might still be waiting for some devices to show up, wait a few sec just in case.
  sleep 10

  ##mdadm autostart doesn't seem to work even with metadata 0.90
  ##for now start any arrays present and try again.
  #if [ "$micon_ver" = "3" ]; then
  #  micro-evtd -p "$micon_port" -s3 "LED_ON 3","LCD_PUTS 1 Scanning MDADM"
  #fi
  echo "failed to find rootfs, trying mdadm"
  echo ""
  mkdir -p /run/mdadm
  mdadm --detail --scan 2>&1
  mdadm --assemble --scan
  mdadm --detail --scan 2>&1

  BOOTDEV=`blkid -U "$bootID"`
  ROOTDEV=`blkid -U "$rootfsID"`

  if [ "$ROOTDEV" = "" ]; then
    echo "failed to find rootfs by UUID, trying by PARTLABEL"
    BOOTDEV="$(blkid -t PARTLABEL="BRBOOT" -o device)"
    ROOTDEV="$(blkid -t PARTLABEL="BRROOT" -o device)"
  fi
fi

###could cache conf in /boot...we know where that will be.

if [ "$ROOTDEV" = "" ] || [ $FORCESHELL -eq 1 ]; then
  lcd_put " Custom InitRD  " " Recovery Shell "
  lcd_color "red"
  echo "dropping to a shell"
  echo ""
  echo "mount your rootfs on /mnt/root then type 'exit' to continue boot"
  getty -n -l /bin/sh -t 300 -L console 0 vt100
else
  RTYPE="$(blkid -s TYPE -o value "$ROOTDEV")"
  BTYPE="$(blkid -s TYPE -o value "$BOOTDEV")"
  echo "ROOTFS: $RTYPE $ROOTDEV"
  echo "BOOTFS: $BTYPE $BOOTDEV"
  mount -t "$RTYPE" -o ro "$ROOTDEV" /mnt/root 2>/dev/null
  [ -n "$BOOTDEV" ] && mount -t "$BTYPE" "$BOOTDEV" /mnt/root/boot 2>/dev/null
fi

lcd_put " Custom InitRD  " "Attempting Boot "

umount /dev /proc /sys
mount -t devtmpfs none /mnt/root/dev

exec switch_root /mnt/root /sbin/init
